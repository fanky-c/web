/**
 * 	播放器效果
 * 
 *  @author Vincent(zhongyongsheng@chinaduo.com)
 * 	@date 2011-12-16
 * 	@version 1.0.0
 */
;(function($){
	$.uiwidget = $.uiwidget || {};
	$.uiwidget.Slide = function(el, cfg){
		cfg = $.extend({}, $.uiwidget.Slide.defaults, cfg);
		$.extend(this, cfg);
		this.el = $(el);
		this[cfg.animate]('first');
	};
	
	$.uiwidget.Slide.prototype = {
		t : 0
		,ot : 0
		,scrollSlide: function(args){
//			console.debug('animate， dir=' + args.dir + ', index=' + args.index);
			if(args.index) this.t = args.index;
			var options = $.extend($.uiwidget.Slide.defaults, {});
			
			this.el.css("overflow","hidden");
			var slideElements = $('.part');
			var s = slideElements.length;
			
			var ts = s-1;
			switch(args.dir){
				case "next":
					this.t = (this.ot>=ts) ? (options.continuous ? 0 : ts) : this.t+1;						
					break; 
				case "prev":
					this.t = (t<=0) ? (options.continuous ? ts : 0) : this.t-1;
					break; 
				case "first":
					this.t = 0;
					break; 
				case "last":
					this.t = ts;
					break; 
				default:
					break; 
			};	
//			console.debug('this.t = ' + this.t + ', this.ot=' + this.ot);
			
			var w = slideElements.width();
//			console.debug('w = ' + w);
			var h = slideElements.height();
			//计算滚动的速度
			var diff = Math.abs(this.ot-this.t);
			var speed = options.speed;						
			if(!options.vertical) {
				p = (this.t*w*-1);
//				console.debug('p = '+p + ', speed='+speed);
//				return;
				this.el.animate(
					{ marginLeft: p }, 
					speed
				);				
			}
//			else {
//				p = (t*h*-1);
//				this.el.animate(
//					{ marginTop: p }, 
//					speed
//				);					
//			};
			this.ot = this.t;
			if(args.clicked) clearTimeout(timeout);
			if(options.auto  && !args.clicked){;
//				console.debug('auto');
				timeout = this.defer(this.scrollSlide, diff*options.speed+options.pause, this, [{dir : "next", clicked :false}]
				);
			};
			this.callback(this.t);
			
		}
	
		,fadeSlide: function(args){
	//		console.debug('animate， dir=' + args.dir + ', index=' + args.index);
			if(args.index) this.t = args.index;
//			var options = $.extend($.uiwidget.Slide.defaults, {});
			
			this.el.css("overflow","hidden");
			var slideElements = this.elements;
			var s = slideElements.length;
			
			var elmentsLength = s-1;
			switch(args.dir){
				case "next":
					this.t = (this.ot>=elmentsLength) ? (this.continuous ? 0 : elmentsLength) : this.t+1;						
					break; 
				case "prev":
					this.t = (t<=0) ? (this.continuous ? elmentsLength : 0) : this.t-1;
					break; 
				case "first":
					this.t = 0;
					break; 
				case "last":
					this.t = elmentsLength;
					break; 
				default:
					break; 
			};	
//			console.debug('this.t = ' + this.t + ', this.ot=' + this.ot);
			
			if(!this.vertical) {
				if(this.ot != this.t){
					slideElements.eq(this.ot).fadeTo(this.speed, 0);
				}
//				console.debug('speed='+this.speed);
				slideElements.eq(this.t).fadeTo(this.speed, 1);
			}
			this.ot = this.t;
			if(args.clicked) clearTimeout(timeout);
			if(this.auto  && !args.clicked){;
	//			console.debug('auto');
				timeout = this.defer(this.fadeSlide, this.speed+this.pause, this, [{dir : "next", clicked :false}]
				);
			};
			this.callback(this.t);
			
		}
		
		
		,createDelegate : function(method, obj, args, appendArgs){
	        return function() {
	            var callArgs = args || arguments;
	            if(appendArgs === true){
	                callArgs = Array.prototype.slice.call(arguments, 0);
	                callArgs = callArgs.concat(args);
	            }else if(typeof appendArgs == "number"){
	                callArgs = Array.prototype.slice.call(arguments, 0); 
	                var applyArgs = [appendArgs, 0].concat(args); 
	                Array.prototype.splice.apply(callArgs, applyArgs); 
	            }
	            return method.apply(obj || window, callArgs);
	        };
	    }
		
		,defer : function(method, millis, obj, args, appendArgs){
	        var fn = this.createDelegate(method, obj, args, appendArgs);
	        if(millis){
	            return setTimeout(fn, millis);
	        }
	        fn();
	        return 0;
	    }
	};
	
	$.uiwidget.Slide.defaults = {
		vertical:		false,
		speed: 			500,
		auto:			true,
		pause:			5000,
		continuous:		true
	};
	
	$.fn.slide = function(cfg){
		return new $.uiwidget.Slide(this, cfg);
	};
	
})(jQuery);	